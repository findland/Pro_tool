#include"pdbread.h"
using namespace std;

void Residue::init(){
    this->Atom_num=0;
    this->Atoms.clear();
}
void Residue::add_Atom(Atom a){
    this->Atom_num++;
    this->Atoms.push_back(a);
}
Cood Residue::Center(){
    double Cx=0;
    double Cy=0;
    double Cz=0;
    int count=0;
    for(vector<Atom>::iterator i = Atoms.begin();i!=Atoms.end() ; i++){
        Cx+=i->cor.x;
        Cy+=i->cor.y;
        Cz+=i->cor.z;
        count++;
    }
    Cood center;
    center.x=Cx/count;
    center.y=Cy/count;
    center.x=Cz/count;
    return center;
}

void Chain::init(){
    this->Res_num=0;
    this->Atom_num=0;
    this->Residues.clear();
}

void Chain::add_Res(Residue a){
    this->Res_num++;
    this->Atom_num+=a.Atom_num;
    this->Residues.push_back(a);
}

Cood Chain::Center(){
    double Cx=0;
    double Cy=0;
    double Cz=0;
    int count=0;
    for(vector<Residue>::iterator i = Residues.begin();i!=Residues.end() ; i++){
        for(vector<Atom>::iterator j = i->Atoms.begin();j!=i->Atoms.end() ;j++){
            Cx+=j->cor.x;
            Cy+=j->cor.y;
            Cz+=j->cor.z;
            count++;
        }
    }
    Cood center;
    center.x=Cx/count;
    center.y=Cy/count;
    center.x=Cz/count;
    return center;
}

void Complex::add_Chain(Chain a){
    this->Chain_num++;
    this->Res_num+=a.Res_num;
    this->Atom_num+=a.Atom_num;
    Chains.push_back(a);
}
Cood Complex::Center(){
    double Cx=0;
    double Cy=0;
    double Cz=0;
    int count=0;
    for(vector<Chain>::iterator i = Chains.begin();i!=Chains.end() ; i++){
        for(vector<Residue>::iterator j = i->Residues.begin();j!=i->Residues.end() ; j++){
            for(vector<Atom>::iterator k = j->Atoms.begin();k!=j->Atoms.end() ;k++){
                Cx+=k->cor.x;
                Cy+=k->cor.y;
                Cz+=k->cor.z;
                count++;
            }
        }
    }
    Cood center;
    center.x=Cx/count;
    center.y=Cy/count;
    center.x=Cz/count;
    return center;
}


double distance(Cood a ,Cood b){
    double dis = sqrt((a.x-b.x)*(a.x-b.x) +(a.y-b.y)*(a.y-b.y)+(a.z-b.z)*(a.z-b.z));
    return dis;
}

ofstream &operator<<(ofstream &out,Cood a){
    out<<a.x<<"\t"<<a.y<<"\t"<<a.z;
    return out;
}


string get_chain_name(string filename){
    ifstream file;
    file.open(filename,ios::in);
    string chain_name="";
    string tmp="";
    string buf;
    while(getline(file,buf)){
        if(buf.substr(0,4)=="ATOM"){
            string c_name=buf.substr(21,1);
            if(c_name!=tmp){
                tmp=c_name;
                chain_name+=tmp;
            }
        }//if(buf.substr(0,4)=="ATOM"){
    }// while(getline(file,buf)){
    return chain_name;
}

int find_res(string a){
    int i;
    for (i =0;i<20;i++){
        if (residue_name[i]==a || residue_name_short[i]==a)
            break;
    }
    return i;
}
string res_name_l2s(string a){
    int res_num=find_res(a);
    if (res_num==20){
        cout<<"该残基为非标准残基"<<endl;
        return "";
    }
    return residue_name_short[res_num];
}
string res_name_s2l(string a){
    int res_num=find_res(a);
    if (res_num==20){
        cout<<"该残基为非标准残基"<<endl;
        return "";
    }
    return residue_name[res_num];
}



Complex readpdb(string filename,string Chain_ID=""){

    if(Chain_ID==""){
        Chain_ID=get_chain_name(filename);
    }
    string buf;
    Atom Atom_tmp;
    Residue Residue_tmp;
    Chain Chain_tmp;
    Complex pro;
    string Res_name;
    string Chain_name;
    int Res_ID;

    ifstream file;
    file.open(filename,ios::in);
    if(!file.is_open()){
        cout<<filename<<"打开失败"<<endl;
        return pro;
    }

    while (getline(file,buf)){
        if(buf.substr(0,4)=="ATOM"){
            Atom_tmp.Atom_ID=atoi(buf.substr(6,5).c_str());
            Atom_tmp.Atom_name=buf.substr(12,4);
            Res_name=buf.substr(17,3);
            Chain_name=buf.substr(21,1);
            if(Chain_ID.find(Chain_name)==string::npos){
                continue;
            }
            Res_ID=atoi(buf.substr(22,4).c_str());
            Atom_tmp.cor.x= atof(buf.substr(30,8).c_str());
            Atom_tmp.cor.y= atof(buf.substr(38,8).c_str());
            Atom_tmp.cor.z= atof(buf.substr(46,8).c_str());
        
            if(Residue_tmp.Res_ID==-999){
                Residue_tmp.Res_name=Res_name;
                Residue_tmp.Res_ID=Res_ID;
                Residue_tmp.add_Atom(Atom_tmp);
            }
            else if(Residue_tmp.Res_ID!=Res_ID){
                //判断是否是初次储存Chain,初次则改名，加残基
                if(Chain_tmp.Chain_name=="*"){
                    Chain_tmp.Chain_name=Chain_name;
                    Chain_tmp.add_Res(Residue_tmp);
                }
                // 判断是否换链,如果换链，
                // 则加入当前残基，
                // 并把当前链加入到complex
                // 初始化，并改链名
                else if (Chain_tmp.Chain_name!=Chain_name){
                    Chain_tmp.add_Res(Residue_tmp);
                    pro.add_Chain(Chain_tmp);
                    Chain_tmp.init();
                    Chain_tmp.Chain_name=Chain_name;
                    
                }
                else{
                    Chain_tmp.add_Res(Residue_tmp);
                }
                //将当前的residue加入到Chain中
                //初始化residue，重新赋值
                Residue_tmp.init();
                Residue_tmp.Res_name=Res_name;
                Residue_tmp.Res_ID=Res_ID;
                Residue_tmp.add_Atom(Atom_tmp);
            }
            else{
                Residue_tmp.add_Atom(Atom_tmp);
            }
        }
    }
    //读取后最后一个残基收尾
    Chain_tmp.add_Res(Residue_tmp);
    pro.add_Chain(Chain_tmp);
    return pro;
}

int main(){
    Complex a = readpdb("../6acg.pdb","B");
    /*
    for(vector<Chain>::iterator i =a.Chains.begin();i!=a.Chains.end();i++){
        for(vector<Residue>::iterator j =i->Residues.begin();j!=i->Residues.end();j++){
            for(vector<Atom>::iterator k =j->Atoms.begin();k!=j->Atoms.end();k++){
                cout<<k->Atom_ID<<" "<<k->Atom_name<<" "
                    <<j->Res_name<<" "<<i->Chain_name<<" "
                    <<j->Res_ID<<" "<<k->cor.x<<" "<<k->cor.y<<" "<<k->cor.z<<endl;
            }
        }
    }
    */
   /*
   for(int l=0 ;l<20 ;l++){
       int flag=0;
        for(vector<Chain>::iterator i =a.Chains.begin();i!=a.Chains.end();i++){
            for(vector<Residue>::iterator j =i->Residues.begin();j!=i->Residues.end();j++){
                if (residue_name[l]==j->Res_name && flag ==0 ){
                    // cout<<j->Res_name<< "\t\"";
                    cout <<"\"";
                    for(vector<Atom>::iterator k =j->Atoms.begin();k!=j->Atoms.end();k++){
                            cout<<k->Atom_name;
                    }
                    cout <<"\","<<endl;
                    flag=1;
                }
            }// loop in residue
        } //loop in chain
    }
    */
    for (int i=0;i<20;i++){
        cout << res_atom[i].length()/4<<",";
    }
    cout <<endl;
   
   
   //cout<<get_chain_name("../6acg.pdb")<<endl;
   // test01();
    return 0;
}